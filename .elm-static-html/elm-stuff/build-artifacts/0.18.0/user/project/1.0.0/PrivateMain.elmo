var _user$project$PrivateMain$options = _elm_lang$core$Native_Utils.update(
	_eeue56$elm_html_in_elm$ElmHtml_ToString$defaultFormatOptions,
	{newLines: true, indent: 4});
var _user$project$PrivateMain$asJsonString = _user$project$Native_Jsonify.stringify;
var _user$project$PrivateMain$decode = function (_p0) {
	var _p1 = _p0;
	var _p3 = _p1._0;
	var _p2 = A2(
		_elm_lang$core$Json_Decode$decodeString,
		_eeue56$elm_html_in_elm$ElmHtml_InternalTypes$decodeElmHtml,
		_user$project$PrivateMain$asJsonString(_p1._1));
	if (_p2.ctor === 'Err') {
		return {ctor: '_Tuple2', _0: _p3, _1: _p2._0};
	} else {
		return {
			ctor: '_Tuple2',
			_0: _p3,
			_1: A2(_eeue56$elm_html_in_elm$ElmHtml_ToString$nodeToStringWithOptions, _user$project$PrivateMain$options, _p2._0)
		};
	}
};
var _user$project$PrivateMain$htmlOut = _elm_lang$core$Native_Platform.outgoingPort(
	'htmlOut',
	function (v) {
		return _elm_lang$core$Native_List.toArray(v).map(
			function (v) {
				return [v._0, v._1];
			});
	});
var _user$project$PrivateMain$main = _elm_lang$core$Platform$program(
	{
		init: {
			ctor: '_Tuple2',
			_0: {ctor: '_Tuple0'},
			_1: _user$project$PrivateMain$htmlOut(
				A2(
					_elm_lang$core$List$map,
					_user$project$PrivateMain$decode,
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'dist/index.html', _1: _user$project$Index$view},
						_1: {ctor: '[]'}
					}))
		},
		update: F2(
			function (_p4, b) {
				return {ctor: '_Tuple2', _0: b, _1: _elm_lang$core$Platform_Cmd$none};
			}),
		subscriptions: function (_p5) {
			return _elm_lang$core$Platform_Sub$none;
		}
	})();
